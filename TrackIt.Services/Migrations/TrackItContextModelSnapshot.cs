// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackIt.Services.Database;

#nullable disable

namespace TrackIt.Services.Migrations
{
    [DbContext(typeof(TrackItContext))]
    partial class TrackItContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackIt.Services.Database.ActivityLevel", b =>
                {
                    b.Property<int>("ActivityLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ActivityLevelID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActivityLevelId"));

                    b.Property<double>("Multiplier")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.HasKey("ActivityLevelId");

                    b.ToTable("ActivityLevel", (string)null);
                });

            modelBuilder.Entity("TrackIt.Services.Database.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("TrackIt.Services.Database.DailyIntake", b =>
                {
                    b.Property<int>("DailyIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DailyIntakeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DailyIntakeId"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Day")
                        .HasColumnType("date");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<double?>("Fiber")
                        .HasColumnType("float");

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("DailyIntakeId");

                    b.HasIndex("UserId");

                    b.ToTable("DailyIntake", (string)null);
                });

            modelBuilder.Entity("TrackIt.Services.Database.GeneralUser", b =>
                {
                    b.Property<int>("GeneralUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GeneralUserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GeneralUserId"));

                    b.Property<int>("ActivityLevelId")
                        .HasColumnType("int")
                        .HasColumnName("ActivityLevelID");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<double?>("Height")
                        .HasColumnType("float");

                    b.Property<double?>("TargetWeight")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("GeneralUserId")
                        .HasName("PK_GeneralUser");

                    b.HasIndex("ActivityLevelId");

                    b.HasIndex("UserId");

                    b.ToTable("GeneralUsers");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Goal", b =>
                {
                    b.Property<int>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GoalID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GoalId"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<int?>("TargetCalories")
                        .HasColumnType("int");

                    b.Property<double?>("TargetProtein")
                        .HasColumnType("float");

                    b.HasKey("GoalId");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MealID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealId"));

                    b.Property<double?>("Calories")
                        .HasColumnType("float");

                    b.Property<double?>("Carbs")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength();

                    b.Property<double?>("Fat")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nchar(50)")
                        .IsFixedLength();

                    b.Property<double?>("Protein")
                        .HasColumnType("float");

                    b.HasKey("MealId")
                        .HasName("PK_Meal");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.MealsIngredient", b =>
                {
                    b.Property<int>("MealIngredientsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MealIngredientsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MealIngredientsId"));

                    b.Property<int>("IngredientId")
                        .HasColumnType("int")
                        .HasColumnName("IngredientID");

                    b.Property<int?>("IngredientQuantity")
                        .HasColumnType("int");

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("MealID");

                    b.HasKey("MealIngredientsId")
                        .HasName("PK_MealIngredients");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MealId");

                    b.ToTable("MealsIngredients");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Preference", b =>
                {
                    b.Property<int>("PreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PreferenceId"));

                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.HasKey("PreferenceId");

                    b.ToTable("Preferences");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Color")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("nchar(60)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.HasKey("TagId")
                        .HasName("PK_Table_1");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("TrackIt.Services.Database.TagsMeal", b =>
                {
                    b.Property<int>("TagMealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TagMealID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagMealId"));

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("MealID");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.HasKey("TagMealId")
                        .HasName("PK_TagMeals");

                    b.HasIndex("MealId");

                    b.HasIndex("TagId");

                    b.ToTable("TagsMeals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<string>("Salt")
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.Property<string>("Username")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersGoal", b =>
                {
                    b.Property<int>("UsersGoalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsersGoalsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersGoalsId"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("GoalId")
                        .HasColumnType("int")
                        .HasColumnName("GoalID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UsersGoalsId");

                    b.HasIndex("GoalId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersGoals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersMeal", b =>
                {
                    b.Property<int>("UsersMealsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UsersMealsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersMealsId"));

                    b.Property<DateTime?>("DateConsumed")
                        .HasColumnType("date");

                    b.Property<int>("MealId")
                        .HasColumnType("int")
                        .HasColumnName("MealID");

                    b.Property<int?>("Servings")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UsersMealsId");

                    b.HasIndex("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersMeals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserPreferenceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferenceId"));

                    b.Property<int?>("PreferenceId")
                        .HasColumnType("int")
                        .HasColumnName("PreferenceID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserPreferenceId");

                    b.HasIndex("PreferenceId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPreferences");
                });

            modelBuilder.Entity("TrackIt.Services.Database.WeightOverTime", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(30)
                        .HasColumnType("nchar(30)")
                        .IsFixedLength();

                    b.Property<DateTime?>("DateLogged")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<double?>("Weight")
                        .HasColumnType("float");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("WeightOverTime", (string)null);
                });

            modelBuilder.Entity("TrackIt.Services.Database.Admin", b =>
                {
                    b.HasOne("TrackIt.Services.Database.User", "User")
                        .WithMany("Admins")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Admins_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.DailyIntake", b =>
                {
                    b.HasOne("TrackIt.Services.Database.GeneralUser", "User")
                        .WithMany("DailyIntakes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_DailyIntake_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.GeneralUser", b =>
                {
                    b.HasOne("TrackIt.Services.Database.ActivityLevel", "ActivityLevel")
                        .WithMany("GeneralUsers")
                        .HasForeignKey("ActivityLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_GeneralUsers_ActivityLevel");

                    b.HasOne("TrackIt.Services.Database.User", "User")
                        .WithMany("GeneralUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GeneralUsers_Users");

                    b.Navigation("ActivityLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.MealsIngredient", b =>
                {
                    b.HasOne("TrackIt.Services.Database.Ingredient", "Ingredient")
                        .WithMany("MealsIngredients")
                        .HasForeignKey("IngredientId")
                        .IsRequired()
                        .HasConstraintName("FK_MealsIngredients_Ingredients");

                    b.HasOne("TrackIt.Services.Database.Meal", "Meal")
                        .WithMany("MealsIngredients")
                        .HasForeignKey("MealId")
                        .IsRequired()
                        .HasConstraintName("FK_MealsIngredients_Meal");

                    b.Navigation("Ingredient");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("TrackIt.Services.Database.TagsMeal", b =>
                {
                    b.HasOne("TrackIt.Services.Database.Meal", "Meal")
                        .WithMany("TagsMeals")
                        .HasForeignKey("MealId")
                        .IsRequired()
                        .HasConstraintName("FK_TagsMeals_Meal");

                    b.HasOne("TrackIt.Services.Database.Tag", "Tag")
                        .WithMany("TagsMeals")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_TagsMeals_Tags");

                    b.Navigation("Meal");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersGoal", b =>
                {
                    b.HasOne("TrackIt.Services.Database.Goal", "Goal")
                        .WithMany("UsersGoals")
                        .HasForeignKey("GoalId")
                        .HasConstraintName("FK_UsersGoals_Goals");

                    b.HasOne("TrackIt.Services.Database.GeneralUser", "User")
                        .WithMany("UsersGoals")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersGoals_GeneralUsers");

                    b.Navigation("Goal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersMeal", b =>
                {
                    b.HasOne("TrackIt.Services.Database.Meal", "Meal")
                        .WithMany("UsersMeals")
                        .HasForeignKey("MealId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersMeals_Meal");

                    b.HasOne("TrackIt.Services.Database.GeneralUser", "User")
                        .WithMany("UsersMeals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UsersMeals_Users");

                    b.Navigation("Meal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.UsersPreference", b =>
                {
                    b.HasOne("TrackIt.Services.Database.Preference", "Preference")
                        .WithMany("UsersPreferences")
                        .HasForeignKey("PreferenceId")
                        .HasConstraintName("FK_UsersPreferences_Preferences");

                    b.HasOne("TrackIt.Services.Database.GeneralUser", "User")
                        .WithMany("UsersPreferences")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UsersPreferences_GeneralUsers");

                    b.Navigation("Preference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.WeightOverTime", b =>
                {
                    b.HasOne("TrackIt.Services.Database.GeneralUser", "User")
                        .WithMany("WeightOverTimes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_WeightOverTime_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrackIt.Services.Database.ActivityLevel", b =>
                {
                    b.Navigation("GeneralUsers");
                });

            modelBuilder.Entity("TrackIt.Services.Database.GeneralUser", b =>
                {
                    b.Navigation("DailyIntakes");

                    b.Navigation("UsersGoals");

                    b.Navigation("UsersMeals");

                    b.Navigation("UsersPreferences");

                    b.Navigation("WeightOverTimes");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Goal", b =>
                {
                    b.Navigation("UsersGoals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Ingredient", b =>
                {
                    b.Navigation("MealsIngredients");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Meal", b =>
                {
                    b.Navigation("MealsIngredients");

                    b.Navigation("TagsMeals");

                    b.Navigation("UsersMeals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Preference", b =>
                {
                    b.Navigation("UsersPreferences");
                });

            modelBuilder.Entity("TrackIt.Services.Database.Tag", b =>
                {
                    b.Navigation("TagsMeals");
                });

            modelBuilder.Entity("TrackIt.Services.Database.User", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("GeneralUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
